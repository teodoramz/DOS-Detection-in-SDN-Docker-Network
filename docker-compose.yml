version: '3.8'
services:
  # kafka:
  #   build:
  #     context: ./build/kafka-kraft
  #     args:
  #       KAFKA_IMAGE: ${KAFKA_IMAGE}
  #       KAFKA_IMAGE_TAG: ${KAFKA_IMAGE_TAG}
  #   restart: ${KAFKA_RESTART_POLICY}
  #   hostname: ${KAFKA_HOSTNAME}
  #   container_name: ${KAFKA_CONTAINER_NAME}
  #   ports:
  #     - 0.0.0.0:${KAFKA_WORKERS_PORT}:${KAFKA_WORKERS_PORT}
  #     - 0.0.0.0:${KAFKA_INTERNAL_PORT}:${KAFKA_INTERNAL_PORT}
  #   environment:
  #     KAFKA_KRAFT_MODE: ${KAFKA_KRAFT_MODE}
  #     KAFKA_PROCESS_ROLES: ${KAFKA_PROCESS_ROLES}
  #     KAFKA_NODE_ID: ${KAFKA_NODE_ID}
  #     KAFKA_CONTROLLER_QUORUM_VOTERS: ${KAFKA_CONTROLLER_QUORUM_VOTERS}
  #     KAFKA_LISTENERS: ${KAFKA_LISTENERS}
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
  #     KAFKA_INTER_BROKER_LISTENER_NAME: ${KAFKA_INTER_BROKER_LISTENER_NAME}
  #     KAFKA_CONTROLLER_LISTENER_NAMES: ${KAFKA_CONTROLLER_LISTENER_NAMES}
  #     KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS} # Corectat pentru acces intern
  #     KAFKA_LOG_DIRS: ${KAFKA_LOG_DIRS}
  #     KAFKA_AUTO_CREATE_TOPICS_ENABLE: ${KAFKA_AUTO_CREATE_TOPICS_ENABLE}
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
  #     KAFKA_LOG_RETENTION_HOURS: ${KAFKA_LOG_RETENTION_HOURS}
  #     KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: ${KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS}
  #     CLUSTER_ID: ${CLUSTER_ID}
  #   volumes:
  #     - ./volumes/kafka-kraft/data:${KAFKA_VOLUME}

  # kafdrop:
  #   build:
  #     context: ./build/kafka-kraft
  #     args:
  #       KAFKA_IMAGE: ${KAFDROP_IMAGE}
  #       KAFKA_IMAGE_TAG: ${KAFDROP_IMAGE_TAG}

  #   restart: ${KAFDROP_RESTART_POLICY}
  #   hostname: ${KAFDROP_HOSTNAME}
  #   container_name: ${KAFDROP_CONTAINER_NAME}
  #   ports:
  #     - 0.0.0.0:${KAFDROP_PORT}:${KAFDROP_PORT}
  #   environment:
  #     KAFKA_BROKERCONNECT: ${KAFKA_BROKERCONNECT}
  #   depends_on:
  #     - "kafka"

  dns:
    build:
      context: ./build/dns
      args:
        BIND9_IMAGE: ${BIND9_IMAGE}
        BIND9_IMAGE_TAG: ${BIND9_IMAGE_TAG}
    restart: ${BIND9_RESTART_POLICY}
    hostname: ${BIND9_HOSTNAME}
    container_name: ${BIND9_CONTAINER_NAME}
    network_mode: none
    ports:
      - "0.0.0.0:${BIND9_PORT_HOST}:${BIND9_PORT_UDP}/udp"
      - "0.0.0.0:${BIND9_PORT_HOST}:${BIND9_PORT_TCP}/tcp"
  proxy:
    build:
      context: ./build/proxy
      args:
        NGINX_IMAGE: ${NGINX_IMAGE}
        NGINX_IMAGE_TAG: ${NGINX_IMAGE_TAG}
    restart: ${NGINX_RESTART_POLICY}
    hostname: ${NGINX_HOSTNAME}
    container_name: ${NGINX_CONTAINER_NAME}
    ports:
      - "0.0.0.0:${NGINX_PORT}:${NGINX_PORT}"
      - "0.0.0.0:${NGINX_PORT_SSL}:${NGINX_PORT_SSL}"
    network_mode: none
    volumes:
      - ./build/proxy/nginx.conf:/etc/nginx/nginx.conf
      - ./build/certs/ssl:/etc/nginx/ssl

  # webserver:
  #   build:
  #     context: ./build/webserver
  #     args:
  #       WEBSERVER_IMAGE: ${WEBSERVER_IMAGE}
  #       WEBSERVER_IMAGE_TAG: ${WEBSERVER_IMAGE_TAG}
  #       WEBSERVER_PORT: ${WEBSERVER_PORT}
  #   restart: ${WEBSERVER_RESTART_POLICY}
  #   container_name: ${WEBSERVER_CONTAINER_NAME}
  #   hostname: ${WEBSERVER_HOSTNAME}
  #   # network_mode: none
  #   environment:
  #     WEBSERVER_PORT: ${WEBSERVER_PORT}
  #     WEBSERVER_HOST: ${WEBSERVER_HOST}
  #     WEBSERVER_DEBUG: ${WEBSERVER_DEBUG}
  #   ports:
  #     - "0.0.0.0:${WEBSERVER_PORT}:${WEBSERVER_PORT}"

  # dns_collector:
  #   image: python:3.9-slim
  #   container_name: dns_collector
  #   network_mode: none
  #   cap_add:
  #     - NET_RAW
  #     - NET_ADMIN
  #   volumes:
  #     - ./dns_collector.py:/collector.py
  #   depends_on:
  #     - kafka
  #   command: sh -c "pip install scapy kafka-python && python /collector.py"

  # proxy_collector:
  #   image: python:3.9-slim
  #   container_name: proxy_collector
  #   network_mode: none
  #   cap_add:
  #     - NET_RAW
  #     - NET_ADMIN
  #   volumes:
  #     - ./proxy_collector.py:/collector.py
  #   depends_on:
  #     - kafka
  #   command: sh -c "pip install scapy kafka-python && python /collector.py"

  # web_collector:
  #   image: python:3.9-slim
  #   container_name: web_collector
  #   network_mode: none
  #   cap_add:
  #     - NET_RAW
  #     - NET_ADMIN
  #   volumes:
  #     - ./web_collector.py:/collector.py
  #   depends_on:
  #     - kafka
  #   command: sh -c "pip install scapy kafka-python && python /collector.py"

  # ml_worker:
  #   image: python:3.9-slim
  #   container_name: ml_worker
  #   network_mode: none
  #   volumes:
  #     - ./ml_worker.py:/ml_worker.py
  #   depends_on:
  #     - kafka
  #     - ryu
  #   command: sh -c "pip install scapy kafka-python requests && python /ml_worker.py"

  # ryu:
  #   build:
  #     context: ./build/ryu
  #     args:
  #       RYU_IMAGE: ${RYU_IMAGE}
  #       RYU_IMAGE_TAG: ${RYU_IMAGE_TAG}
  #   restart: ${RYU_RESTART_POLICY}
  #   container_name: ${RYU_CONTAINER_NAME}
  #   hostname: ${RYU_HOSTNAME}
  #   ports:
  #     - "0.0.0.0:${RYU_PORT}:${RYU_PORT}"
  #   # network_mode: none
  #   volumes:
  #     - ./ddos_blocker.py:/ddos_blocker.py
  #   command: sh -c "pip install ryu && ryu-manager --ofp-tcp-listen-port 6633 /ddos_blocker.py ryu.app.ofctl_rest"

