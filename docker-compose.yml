version: '3.8'
services:
  kafka:
    build:
      context: ./build/kafka-kraft
      args:
        KAFKA_IMAGE: ${KAFKA_IMAGE}
        KAFKA_IMAGE_TAG: ${KAFKA_IMAGE_TAG}
    restart: ${KAFKA_RESTART_POLICY}
    hostname: ${KAFKA_HOSTNAME}
    container_name: ${KAFKA_CONTAINER_NAME}
    ports:
      - ${KAFKA_WORKERS_PORT}:${KAFKA_WORKERS_PORT}
      - ${KAFKA_INTERNAL_PORT}:${KAFKA_INTERNAL_PORT}
    environment:
      KAFKA_KRAFT_MODE: ${KAFKA_KRAFT_MODE}
      KAFKA_PROCESS_ROLES: ${KAFKA_PROCESS_ROLES}
      KAFKA_NODE_ID: ${KAFKA_NODE_ID}
      KAFKA_CONTROLLER_QUORUM_VOTERS: ${KAFKA_CONTROLLER_QUORUM_VOTERS}
      KAFKA_LISTENERS: ${KAFKA_LISTENERS}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_INTER_BROKER_LISTENER_NAME: ${KAFKA_INTER_BROKER_LISTENER_NAME}
      KAFKA_CONTROLLER_LISTENER_NAMES: ${KAFKA_CONTROLLER_LISTENER_NAMES}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS} # Corectat pentru acces intern
      KAFKA_LOG_DIRS: ${KAFKA_LOG_DIRS}
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: ${KAFKA_AUTO_CREATE_TOPICS_ENABLE}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
      KAFKA_LOG_RETENTION_HOURS: ${KAFKA_LOG_RETENTION_HOURS}
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: ${KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS}
      CLUSTER_ID: ${CLUSTER_ID}
    volumes:
      - ./volumes/kafka-kraft/data:${KAFKA_VOLUME}

  kafdrop:
    build:
      context: ./build/kafka-kraft
      args:
        KAFKA_IMAGE: ${KAFDROP_IMAGE}
        KAFKA_IMAGE_TAG: ${KAFDROP_IMAGE_TAG}

    restart: ${KAFDROP_RESTART_POLICY}
    hostname: ${KAFDROP_HOSTNAME}
    container_name: ${KAFDROP_CONTAINER_NAME}
    ports:
      - ${KAFDROP_PORT}:${KAFDROP_PORT}
    environment:
      KAFKA_BROKERCONNECT: ${KAFKA_BROKERCONNECT}
    depends_on:
      - "kafka"

  dns:
    build:
      context: ./build/bind9
      args:
        BIND9_IMAGE: ${BIND9_IMAGE}
        BIND9_IMAGE_TAG: ${BIND9_IMAGE_TAG}
    restart: ${BIND9_RESTART_POLICY}
    hostname: ${BIND9_HOSTNAME}
    container_name: ${BIND9_CONTAINER_NAME}
    network_mode: none
    volumes:
      - ./named.conf:/etc/bind/named.conf
      - ./db.cyberstuff.local:/etc/bind/db.cyberstuff.local
    depends_on:
      - kafka
    command: [ "-g" ]

  proxy:
    image: nginx:alpine
    container_name: proxy
    network_mode: none
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - web

  web:
    image: python:3.9-slim
    container_name: web
    network_mode: none
    volumes:
      - ./app.py:/app/app.py
      - ./requirements.txt:/app/requirements.txt
    working_dir: /app
    command: sh -c "pip install -r requirements.txt && python app.py"

  dns_collector:
    image: python:3.9-slim
    container_name: dns_collector
    network_mode: none
    cap_add:
      - NET_RAW
      - NET_ADMIN
    volumes:
      - ./dns_collector.py:/collector.py
    depends_on:
      - kafka
    command: sh -c "pip install scapy kafka-python && python /collector.py"

  proxy_collector:
    image: python:3.9-slim
    container_name: proxy_collector
    network_mode: none
    cap_add:
      - NET_RAW
      - NET_ADMIN
    volumes:
      - ./proxy_collector.py:/collector.py
    depends_on:
      - kafka
    command: sh -c "pip install scapy kafka-python && python /collector.py"

  web_collector:
    image: python:3.9-slim
    container_name: web_collector
    network_mode: none
    cap_add:
      - NET_RAW
      - NET_ADMIN
    volumes:
      - ./web_collector.py:/collector.py
    depends_on:
      - kafka
    command: sh -c "pip install scapy kafka-python && python /collector.py"

  ml_worker:
    image: python:3.9-slim
    container_name: ml_worker
    network_mode: none
    volumes:
      - ./ml_worker.py:/ml_worker.py
    depends_on:
      - kafka
      - ryu
    command: sh -c "pip install scapy kafka-python requests && python /ml_worker.py"

  ryu:
    image: python:3.9-slim
    container_name: ryu
    network_mode: none
    volumes:
      - ./ddos_blocker.py:/ddos_blocker.py
    depends_on:
      - kafka
    command: sh -c "pip install ryu && ryu-manager --ofp-tcp-listen-port 6633 /ddos_blocker.py ryu.app.ofctl_rest"
